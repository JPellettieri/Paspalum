M_sinInt2 <- glmmTMB( (PF.mm/PL_m) ~ Localidad * Línea + ns(tiempo, 2) + (1|Bloque),
family = Gamma(link = "log"), , data = medidas_repetidas_clean )
M_sinInt3 <- glmmTMB( (PF.mm/PL_m) ~ Localidad * Línea + ns(tiempo, 3) + (1|Bloque),
family = Gamma(link = "log"), , data = medidas_repetidas_clean )
M_conInt3 <- glmmTMB( (PF.mm/PL_m) ~ Localidad * Línea* ns(tiempo, 3) + (1|Bloque),
family = Gamma(link = "log"), , data = medidas_repetidas_clean )
M_sinInt4 <- glmmTMB( (PF.mm/PL_m) ~ Localidad * Línea + ns(tiempo, 4) + (1|Bloque),
family = Gamma(link = "log"), , data = medidas_repetidas_clean )
M_conInt4 <- glmmTMB( (PF.mm/PL_m) ~ Localidad * Línea* ns(tiempo, 4) + (1|Bloque),
family = Gamma(link = "log"), , data = medidas_repetidas_clean )
anova(M_sinInt2 , M_sinInt3 , M_sinInt4) #de nuevo con el sinInt4 MENTIRA NO DAN LOS SUPUESTOS
anova(M_sinInt4, M_conInt4)
res <- simulateResiduals(fittedModel = M_conInt4, n = 1000) # cumple los supuestos el conINT4
plot(res)
emm_loc_lin <- emmeans(M_sinInt4, ~ Línea |Localidad)
emm_loc_lin <- emmeans(M_conInt4, ~ Línea |Localidad)
emm_loc_lin_resp <- summary(emm_loc_lin, type = "response")
emm_loc_lin_resp
pairs_all <- pairs(emm_loc_lin)
summary(pairs_all)
pairs_all <- pairs(emm_loc_lin)
summary(pairs_all, infer = TRUE)
library(multcomp)
cld_link <- cld(emm_loc_lin, Letters = letters, type = "link")
cld_link
cld_link_df <- as.data.frame(cld_link)
# Convert emm_resp to a plain data.frame
emm_resp_df <- as.data.frame(emm_resp)
# Now join by the factor columns
cld_resp <- left_join(emm_resp_df,
cld_link_df[, c("Localidad", "Línea", ".group")],
by = c("Localidad", "Línea"))
cld_resp
ggplot(cld_resp, aes(x = Localidad, y = response, color = Línea)) +
geom_point(position = position_dodge(width = 0.6), size = 3) +
geom_errorbar(aes(ymin = asymp.LCL, ymax = asymp.UCL),
width = 0.2, position = position_dodge(width = 0.6)) +
geom_text(aes(label = .group),
position = position_dodge(width = 0.6),
vjust = -0.8, size = 5) +
scale_color_manual(values = cols_mod) +
labs(y = "Estimated mean PFºC / PL_m",
x = "Localidad",
title = "Estimated marginal means (Gamma GLMM) with group letters") +
theme_minimal(base_size = 14)
emm_loc_lin <- emmeans(M_conInt4, ~ Localidad |Línea)
emm_loc_lin_resp <- summary(emm_loc_lin, type = "response")
emm_loc_lin_resp
pairs_all <- pairs(emm_loc_lin)
summary(pairs_all)
pairs_all <- pairs(emm_loc_lin)
summary(pairs_all, infer = TRUE)
library(multcomp)
cld_link <- cld(emm_loc_lin, Letters = letters, type = "link")
cld_link
cld_link_df <- as.data.frame(cld_link)
# Convert emm_resp to a plain data.frame
emm_resp_df <- as.data.frame(emm_resp)
# Now join by the factor columns
cld_resp <- left_join(emm_resp_df,
cld_link_df[, c("Localidad", "Línea", ".group")],
by = c("Localidad", "Línea"))
cld_resp
ggplot(cld_resp, aes(x = Línea, y = response, color = Localidad)) +
geom_point(position = position_dodge(width = 0.6), size = 3) +
geom_errorbar(aes(ymin = asymp.LCL, ymax = asymp.UCL),
width = 0.2, position = position_dodge(width = 0.6)) +
geom_text(aes(label = .group),
position = position_dodge(width = 0.6),
vjust = -0.8, size = 5) +
scale_color_manual(values = cols_mod) +
labs(y = "Estimated mean PFºC / PL_m",
x = "Línea",
title = "Estimated marginal means (Gamma GLMM) with group letters") +
theme_minimal(base_size = 14)
###Dinámica temporal de medias marginales
library(ggeffects)
#POR LÍNEA
pred <- ggpredict(M_conInt4, terms = c("tiempo [all]", "Línea"))
ggplot(pred, aes(x = x, y = predicted, color = group, fill = group)) +
geom_line(size = 1) +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = 0.2, color = NA) +
labs(x = "Tiempo", y = "Producción relativa (predicha) por mm",
color = " Línea", fill = " Línea") +
theme_minimal(base_size = 14)
#POR Localidad
pred <- ggpredict(M_conInt4, terms = c("tiempo [all]", "Localidad"))
ggplot(pred, aes(x = x, y = predicted, color = group, fill = group)) +
geom_line(size = 1) +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = 0.2, color = NA) +
labs(x = "Tiempo", y = "Producción relativa (predicha) por mm",
color = " Localidad", fill = " Localidad") +
theme_minimal(base_size = 14)
#USAR ESTO COMO TEMPLATE PARA EL DE MEDIAS MARGINALES
#Medias marginales
emm_loc <- emmeans(M_conInt4, ~ Localidad)
emm_lin <- emmeans(M_conInt4, ~ Línea)
cld_loc <- cld(emm_loc, Letters = letters)
df_loc <- as.data.frame(cld_loc)
# Letras para Línea
cld_lin <- cld(emm_lin, Letters = letters)
df_lin <- as.data.frame(cld_lin)
str(cld_lin)
## 4. Graficar Localidad
ggplot(df_loc, aes(x = Localidad, y = exp(emmean))) +
geom_col(fill = cols_mod[1], color = "black") +
geom_errorbar(aes(ymin = exp(asymp.LCL), ymax = exp(asymp.UCL),
width = 0.2)) +
geom_text(aes(label = .group), vjust = -0.8, size = 5) +   # letras arriba
labs(y = "Estimated mean PFºC / PL_", x = "Localidad",
title = "Medias marginales estimadas por Localidad") +
theme_bw()
## 4. Graficar Localidad
ggplot(df_loc, aes(x = Localidad, y = exp(emmean))) +
geom_col(fill = cols_mod[1], color = "black") +
geom_errorbar(aes(ymin = exp(asymp.LCL), ymax = exp(asymp.UCL),
width = 0.2)) +
geom_text(aes(label = .group), vjust = -0.8, size = 5) +   # letras arriba
labs(y = "Estimated mean PFmm / PL_", x = "Localidad",
title = "Medias marginales estimadas por Localidad") +
theme_bw()
## 5. Graficar Línea
ggplot(df_lin, aes(x = Línea, y = exp(emmean), fill = Línea)) +
geom_col(color = "black") +
geom_errorbar(aes(ymin = exp(asymp.LCL), ymax = exp(asymp.UCL)),
width = 0.2) +
scale_fill_manual(values = cols_mod) +
geom_text(aes(label = .group), vjust = -0.8, size = 5) +
labs(y = "Estimated mean PFmm / PL_", x = "Línea",
title = "Medias marginales estimadas por Línea") +
theme_bw()
emm_CC <- emmeans(M_conInt4, ~ Línea| Localidad)
cld_CC <- cld(emm_CC, Letters = letters)
df_CC <- as.data.frame(cld_CC)
cld_CC
pairs_emm <- contrast(emm_CC, method = "pairwise", adjust = "sidak")
pairs_emm
pairs_emm <- contrast(emm_CC, method = "pairwise", adjust = "tukey")
pairs_emm
modelo_GEI <- glmmTMB(
DMR ~ Localidad*Línea +Año +(1|Bloque),
family = tweedie(link="log"),
data = relativos
)
res <- simulateResiduals(modelo_GEI)
plot(res)
testDispersion(res)#  Test de sobredispersión
testZeroInflation(res)#  Test de cero-inflación (exceso de ceros)
# Medias estimadas de DMR por Localidad
emm_GEI <- emmeans(modelo_GEI, ~ Localidad)
summary(modelo_GEI)
anova(modelo_GEI)  #Si
emm_lineas <- emmeans(modelo_GEI, ~ Línea) #contraste
pairs(emm_lineas, adjust = "tukey") #J7-L37 y J7-UF93
emm_loc <- emmeans(modelo_GEI, ~ Localidad)
pairs(emm_loc, adjust = "tukey")
# Comparaciones post hoc con letras
cld_loc <- multcomp::cld(emm_loc, Letters = letters, adjust = "tukey")
df_plot_loc <- as.data.frame(cld_loc)
df_plot_loc
# Paleta de colores
cols <- paletteer_d("ggthemes::excel_Depth")
cols_mod <- cols
cols_mod[2] <- cols[6]
# Gráfico
ggplot(df_plot_loc, aes(x = Localidad, y = exp(emmean), fill = Localidad)) +
geom_col(color = "black") +
geom_errorbar(aes(ymin =exp(asymp.LCL), ymax = exp(asymp.UCL)),
width = 0.2, size = 0.8) +
geom_text(aes(label = .group, y = emmean + 5),   # ajustá el +5 según escala de DMR
size = 5) +
scale_fill_manual(values = cols_mod) +
labs(
x = "Localidad",
y = "Densidad de inflorescencias (DMR, predicho)",
title = "Medias estimadas de DMR por localidad"
) +
theme_minimal()
# Gráfico
ggplot(df_plot_loc, aes(x = Localidad, y = exp(emmean), fill = Localidad)) +
geom_col(color = "black") +
geom_errorbar(aes(ymin =exp(asymp.LCL), ymax = exp(asymp.UCL)),
width = 0.2, size = 0.8) +
geom_text(aes(label = .group, y = emmean +0.1),   # ajustá el +5 según escala de DMR
size = 5) +
scale_fill_manual(values = cols_mod) +
labs(
x = "Localidad",
y = "Densidad de inflorescencias (DMR, predicho)",
title = "Medias estimadas de DMR por localidad"
) +
theme_minimal()
# Gráfico
ggplot(df_plot_loc, aes(x = Localidad, y = exp(emmean), fill = Localidad)) +
geom_col(color = "black") +
geom_errorbar(aes(ymin =exp(asymp.LCL), ymax = exp(asymp.UCL)),
width = 0.2, size = 0.8) +
geom_text(aes(label = .group, y = exp(emmean) +0.1),   # ajustá el +5 según escala de DMR
size = 5) +
scale_fill_manual(values = cols_mod) +
labs(
x = "Localidad",
y = "Densidad de inflorescencias (DMR, predicho)",
title = "Medias estimadas de DMR por localidad"
) +
theme_minimal()
# Gráfico
ggplot(df_plot_loc, aes(x = Localidad, y = exp(emmean), fill = Localidad)) +
geom_col(color = "black") +
geom_errorbar(aes(ymin =exp(asymp.LCL), ymax = exp(asymp.UCL)),
width = 0.2, size = 0.8) +
geom_text(aes(label = .group, y = exp(emmean) +1),   # ajustá el +5 según escala de DMR
size = 5) +
scale_fill_manual(values = cols_mod) +
labs(
x = "Localidad",
y = "Densidad de inflorescencias (DMR, predicho)",
title = "Medias estimadas de DMR por localidad"
) +
theme_minimal()
#HAGO SEMILLAS LLENAS#####
head(relativos)
modelo_loc <- glmmTMB(
na.omit(`Prod. S. llenas`)~ Localidad *Línea + Año +(1|Bloque),
family = tweedie(link="log"),
data = relativos)
modelo_loc <- glmmTMB(
na.omit(`Prod. S. llenas`~ Localidad *Línea + Año +(1|Bloque)),
family = tweedie(link="log"),
data = relativos)
res <- simulateResiduals(modelo_loc)
plot(res)
testDispersion(res)#  Test de sobredispersión
testZeroInflation(res)#  Test de cero-inflación (exceso de ceros)
summary(modelo_loc)
car::Anova(modelo_loc) # Localidad 43.679  3  1.765e-09 ***
#contraste
tukey_loc <- pairs(emm_loc, adjust = "tukey")
tukey_loc
# Medias estimadas
emm_loc <- emmeans(modelo_loc, ~ Localidad, type = "response")
emm_loc
# Obtenemos los intervalos de confianza
df_plot_loc <- as.data.frame(emm_loc)
str(df_plot_loc)
df_plot_loc$.group <- cld_loc$.group  # agregamos las letras
# Paleta de colores
cols <- paletteer_d("ggthemes::excel_Depth")
cols_mod <- cols
cols_mod[2] <- cols[6]
# Gráfico
ggplot(df_plot_loc, aes(x = Localidad, y = response , fill = Localidad)) +
geom_col(color = "black") +
geom_errorbar(aes(ymin = asymp.LCL, ymax = asymp.UCL),
width = 0.2, size = 0.8) +
geom_text(aes(label = .group, y = response  + 2), size = 5) +  # ajusté +2 para que las letras queden dentro del eje
scale_fill_manual(values = cols_mod) +
scale_y_continuous(limits = c(0, 1)) +  # ajusta según rango real
labs(
x = "Localidad",
y = "Densidad de inflorescencias (DMR, predicho)",
title = "Medias estimadas de DMR por localidad"
) +
theme_minimal()
# Gráfico
ggplot(df_plot_loc, aes(x = Localidad, y = response , fill = Localidad)) +
geom_col(color = "black") +
geom_errorbar(aes(ymin = asymp.LCL, ymax = asymp.UCL),
width = 0.2, size = 0.8) +
geom_text(aes(label = .group, y = response  + 2), size = 5) +  # ajusté +2 para que las letras queden dentro del eje
scale_fill_manual(values = cols_mod) +
scale_y_continuous(limits = c(0, 1)) +  # ajusta según rango real
labs(
x = "Localidad",
y = "Semillas llenas (Semillas llenas, predicho)",
title = "semillas llenas"
) +
theme_minimal()
# Gráfico
ggplot(df_plot_loc, aes(x = Localidad, y = response , fill = Localidad)) +
geom_col(color = "black") +
geom_errorbar(aes(ymin = asymp.LCL, ymax = asymp.UCL),
width = 0.2, size = 0.8) +
geom_text(aes(label = .group, y = response  + 2), size = 5) +  # ajusté +2 para que las letras queden dentro del eje
scale_fill_manual(values = cols_mod) +
scale_y_continuous(limits = c(0, 1)) +  # ajusta según rango real
labs(
x = "Localidad",
y = "Semillas llenas (Semillas llenas, predicho)",
title = "semillas llenas por planta"
) +
theme_minimal()
#Por Línea
emm_loc <- emmeans(modelo_loc, ~ Línea, type = "response")
emm_loc
# Obtenemos los intervalos de confianza
df_plot_loc <- as.data.frame(emm_loc)
str(df_plot_loc)
df_plot_loc$.group <- cld_loc$.group  # agregamos las letras
# Paleta de colores
cols <- paletteer_d("ggthemes::excel_Depth")
cols_mod <- cols
cols_mod[2] <- cols[6]
# Gráfico
ggplot(df_plot_loc, aes(x = Línea, y = response , fill = Línea)) +
geom_col(color = "black") +
geom_errorbar(aes(ymin = asymp.LCL, ymax = asymp.UCL),
width = 0.2, size = 0.8) +
geom_text(aes(label = .group, y = response  + 2), size = 5) +  # ajusté +2 para que las letras queden dentro del eje
scale_fill_manual(values = cols_mod) +
scale_y_continuous(limits = c(0, 1)) +  # ajusta según rango real
labs(
x = "Línea",
y =  "(Semillas llenas, predicho)",
title = "Medias estimadas de Semillas llenas por línea"
) +
theme_minimal()
modelo_loc <- glmmTMB(
`Prod. S. llenas`~ Localidad *Línea + Año +(1|Bloque),
family = tweedie(link="log"),
data = relativos)
res <- simulateResiduals(modelo_loc)
plot(res)
testDispersion(res)#  Test de sobredispersión
testZeroInflation(res)#  Test de cero-inflación (exceso de ceros)
summary(modelo_loc)
car::Anova(modelo_loc) # Localidad 43.679  3  1.765e-09 ***
#contraste
tukey_loc <- pairs(emm_loc, adjust = "tukey")
tukey_loc
# Medias estimadas
emm_loc <- emmeans(modelo_loc, ~ Localidad, type = "response")
emm_loc
# Obtenemos los intervalos de confianza
df_plot_loc <- as.data.frame(emm_loc)
str(df_plot_loc)
df_plot_loc$.group <- cld_loc$.group  # agregamos las letras
# Paleta de colores
cols <- paletteer_d("ggthemes::excel_Depth")
cols_mod <- cols
cols_mod[2] <- cols[6]
# Gráfico
ggplot(df_plot_loc, aes(x = Localidad, y = response , fill = Localidad)) +
geom_col(color = "black") +
geom_errorbar(aes(ymin = asymp.LCL, ymax = asymp.UCL),
width = 0.2, size = 0.8) +
geom_text(aes(label = .group, y = response  + 2), size = 5) +  # ajusté +2 para que las letras queden dentro del eje
scale_fill_manual(values = cols_mod) +
scale_y_continuous(limits = c(0, 1)) +  # ajusta según rango real
labs(
x = "Localidad",
y = "Semillas llenas (Semillas llenas, predicho)",
title = "semillas llenas por planta"
) +
theme_minimal()
relativos_clean<-na.omit(relativos[, c("`Prod. S. llenas`", "Localidad", "Línea", "tiempo", "Bloque")])
relativos_clean<-na.omit(relativos[, c("`Prod. S. llenas`", "Localidad", "Línea", "Bloque")])
relativos_clean<-na.omit(relativos[, c(`Prod. S. llenas`, "Localidad", "Línea", "Bloque")])
relativos_clean<-na.omit(relativos[, c("Prod. S. llenas", "Localidad", "Línea", "Bloque")])
modelo_loc <- glmmTMB(
`Prod. S. llenas`~ Localidad *Línea + Año +(1|Bloque),
family = tweedie(link="log"),
data = relativos_clean)
relativos_clean<-na.omit(relativos[, c("Prod. S. llenas", "Localidad","Año" ,"Línea", "Bloque")])
modelo_loc <- glmmTMB(
`Prod. S. llenas`~ Localidad *Línea + Año +(1|Bloque),
family = tweedie(link="log"),
data = relativos_clean)
res <- simulateResiduals(modelo_loc)
plot(res)
testDispersion(res)#  Test de sobredispersión
testZeroInflation(res)#  Test de cero-inflación (exceso de ceros)
summary(modelo_loc)
car::Anova(modelo_loc) # Localidad 43.679  3  1.765e-09 ***
#contraste
tukey_loc <- pairs(emm_loc, adjust = "tukey")
tukey_loc
# Medias estimadas
emm_loc <- emmeans(modelo_loc, ~ Localidad, type = "response")
emm_loc
summary(modelo_loc)
View(crudos)
## Hay dif entre localidades? # sin relativizar
# Modelo con Localidad como VE y Línea/Año como efectos aleatorios
modelo_loc <- glmmTMB(
DMR ~ Localidad *Línea + Año +(1|Bloque),
family = tweedie(link="log"),
data = relativos_clean)
modelo_loc <- glmmTMB(
DMR ~ Localidad *Línea + Año +(1|Bloque),
family = gaussian,
data = relativos_clean)
modelo_loc <- glmmTMB(
`Prod. S. llenas`~ Localidad *Línea + Año +(1|Bloque),
family = gaussian,
data = relativos_clean)
res <- simulateResiduals(modelo_loc)
plot(res)
modelo_loc <- glmmTMB(
`Prod. S. llenas`~ Localidad *Línea + Año +(1|Bloque),
family = Gamma (link = "log"),
data = relativos_clean)
modelo_loc <- glmmTMB(
`Prod. S. llenas`~ Localidad *Línea + Año +(1|Bloque),
family = gamma (link = "log"),
data = relativos_clean)
modelo_loc <- glmmTMB(
`Prod. S. llenas`~ Localidad *Línea + Año +(1|Bloque),
family = gaussian,
data = relativos_clean)
res <- simulateResiduals(modelo_loc)
plot(res)
modelo_loc <- glmmTMB(
`Prod. S. llenas`~ Localidad *Línea + Año +(1|Bloque),
family = gaussian,
weights = varIdent(form = ~1 | Localidad),
data = relativos_clean)
modelo_loc <- lme(
fixed = `Prod. S. llenas` ~ Localidad * Línea + Año,
random = ~1 | Bloque,
weights = varIdent(form = ~1 | Localidad),
data = relativos_clean
)
modelo_loc <- lme(
fixed = `Prod. S. llenas` ~ Localidad * Línea + Año,
random = ~1 | Bloque,
weights = varIdent(form = ~1 | Localidad),
data = relativos_clean
)
modelo_loc <- lme(
fixed = (`Prod. S. llenas`) ~ Localidad * Línea + Año,
random = ~1 | Bloque,
weights = varIdent(form = ~1 | Localidad),
data = relativos_clean
)
modelo_loc <- lme(
fixed = `Prod. S. llenas` ~ Localidad * Línea + Año,
random = ~1 | Bloque,
weights = varIdent(form = ~1 | Localidad),
data = relativos
)
relativos$Prod_S_llenas <- relativos$`Prod. S. llenas`
modelo_loc <- lme(
fixed = Prod_S_llenas ~ Localidad * Línea + Año,
random = ~1 | Bloque,
weights = varIdent(form = ~1 | Localidad),
data = relativos
)
relativos_clean$Prod_S_llenas <- relativos_clean$`Prod. S. llenas`
modelo_loc <- lme(
fixed = Prod_S_llenas ~ Localidad * Línea + Año,
random = ~1 | Bloque,
weights = varIdent(form = ~1 | Localidad),
data = relativos_clean
)
modelo_loc <- glmmTMB(
`Prod. S. llenas`~ Localidad *Línea + Año +(1|Bloque),
family = gaussian,
dispformula = ~ Localidad,,
data = relativos_clean)
modelo_loc <- glmmTMB(
`Prod. S. llenas`~ Localidad *Línea + Año +(1|Bloque),
family = gaussian,
dispformula = ~ Localidad,
data = relativos_clean)
res <- simulateResiduals(modelo_loc)
plot(res)
modelo_loc <- glmmTMB(
`Prod. S. llenas`~ Localidad *Línea + Año +(1|Bloque),
family = gaussian,
dispformula = ~ Línea,
data = relativos_clean)
res <- simulateResiduals(modelo_loc)
plot(res)
modelo_loc <- glmmTMB(
`Prod. S. llenas`~ Localidad *Línea + Año +(1|Bloque),
family = gaussian,
dispformula = ~ Línea*Localidad,
data = relativos_clean)
res <- simulateResiduals(modelo_loc)
plot(res)
modelo_loc <- glmmTMB(
`Prod. S. llenas`~ Localidad *Línea + Año +(1|Bloque),
family = gaussian,
dispformula = ~ Línea,
data = relativos_clean)
res <- simulateResiduals(modelo_loc)
plot(res)
modelo_loc <- glmmTMB(
`Prod. S. llenas`~ Localidad *Línea + Año +(1|Bloque),
family = gaussian,
dispformula = ~ Línea+Año,
data = relativos_clean)
res <- simulateResiduals(modelo_loc)
plot(res)
modelo_loc <- glmmTMB(
`Prod. S. llenas`~ Localidad *Línea + Año +(1|Bloque),
family = gaussian,
dispformula = ~ Línea,
data = relativos_clean)
res <- simulateResiduals(modelo_loc)
plot(res)
testDispersion(res)#  Test de sobredispersión
testZeroInflation(res)#  Test de cero-inflación (exceso de ceros)
summary(modelo_loc)
car::Anova(modelo_loc) # Localidad 43.679  3  1.765e-09 ***
#contraste
tukey_loc <- pairs(emm_loc, adjust = "tukey")
tukey_loc
# Medias estimadas
emm_loc <- emmeans(modelo_loc, ~ Localidad, type = "response")
emm_loc
