medidas_repetidas$Bloque
summary(M_PDias_tmb)
car::Anova(M_PDias_tmb, type = 3)
summary(M_PDias_tmb)
car::Anova(M_PDias_tmb, type = 3)
M_PDias_tmb <- glmmTMB(
(PF.d/PL_m) ~ Localidad * Línea + ns(tiempo, df = 4) + (1|Bloque),
dispformula = ~ Localidad,
family = gaussian(),
data = medidas_repetidas_clean
)
car::Anova(M_PDias_tmb, type = 3)
library(splines)
M_sinInt <- glmmTMB((PF.d/PL_m) ~ Localidad * Línea + ns(tiempo, 4) + (1|Bloque),
family = gaussian, data = medidas_repetidas_clean)
M_conInt <- glmmTMB((PF.d/PL_m) ~ Localidad * Línea * ns(tiempo, 4) + (1|Bloque),
family = gaussian, data = medidas_repetidas_clean)
anova(M_sinInt, M_conInt)  # LRT
M_sinInt <- glmmTMB((PF.d/PL_m) ~ Localidad * Línea + ns(tiempo, 4) + (1|Bloque),
family = gaussian, data = medidas_repetidas_clean)
M_conInt <- glmmTMB((PF.d/PL_m) ~ Localidad * Línea * ns(tiempo, 4) + (1|Bloque),
family = gaussian, data = medidas_repetidas_clean)
anova(M_sinInt, M_conInt)  # LRT
M_sinInt <- glmmTMB((PF.d/PL_m) ~ Localidad * Línea + ns(tiempo, 3) + (1|Bloque),
family = gaussian, data = medidas_repetidas_clean)
M_conInt <- glmmTMB((PF.d/PL_m) ~ Localidad * Línea * ns(tiempo, 3) + (1|Bloque),
family = gaussian, data = medidas_repetidas_clean)
anova(M_sinInt, M_conInt)  # LRT
Car::anova(M_sinInt)
car::anova(M_sinInt)
car::Anova(M_sinInt)
library(nlme
cols <- paletteer_d("ggthemes::excel_Depth")
car::Anova(M_sinInt,M_sinInt4)
library(nlme
cols <- paletteer_d("ggthemes::excel_Depth")
library(nlme
cols <- paletteer_d("ggthemes::excel_Depth")
M_sinInt4 <- glmmTMB((PF.d/PL_m) ~ Localidad * Línea + ns(tiempo, 4) + (1|Bloque),
family = gaussian, data = medidas_repetidas_clean)
#M_conInt <- glmmTMB((PF.d/PL_m) ~ Localidad * Línea * ns(tiempo, 3) + (1|Bloque),
family = gaussian, data = medidas_repetidas_clean) #demasiados parámetros para la info disponible. no converge
library(nlme
cols <- paletteer_d("ggthemes::excel_Depth")
library(nlme
cols <- paletteer_d("ggthemes::excel_Depth")
M_sinIntf <- glmmTMB( (PF.d/PL_m) ~ Localidad * Línea + ns(tiempo, 4) + (1|Bloque),
family = gaussian , data = medidas_repetidas_clean )
car::Anova(M_sinInt,M_sinIntf)
car::Anova(M_sinInt,M_sinIntf)
M_sinInt <- glmmTMB( (PF.d/PL_m) ~ Localidad * Línea + ns(tiempo, 3) + (1|Bloque),
family = gaussian , data = medidas_repetidas_clean )
M_sinInt4 <- glmmTMB( (PF.d/PL_m) ~ Localidad * Línea + ns(tiempo, 4) + (1|Bloque),
family = gaussian , data = medidas_repetidas_clean )
car::Anova(M_sinInt,M_sinIntf)
car::Anova(M_sinInt, M_sinInt4)
car::Anova(M_sinInt , M_sinInt4)
anova(M_sinInt , M_sinInt4)
M_sinInt2 <- glmmTMB( (PF.d/PL_m) ~ Localidad * Línea + ns(tiempo, 2) + (1|Bloque),
family = gaussian , data = medidas_repetidas_clean )
M_sinInt3 <- glmmTMB( (PF.d/PL_m) ~ Localidad * Línea + ns(tiempo, 3) + (1|Bloque),
family = gaussian , data = medidas_repetidas_clean )
anova(M_sinInt2 , M_sinInt3)
car::anova(M_sinInt3)
car::Anova(M_sinInt3)
anova(M_sinInt2 , M_sinInt3 , M_sinInt4) # spline 4 complejiza y no agrega nada al analisis, 3 es significativamnete mejor que 2
car::Anova(M_sinInt3)
### Supuestos
res <- simulateResiduals(fittedModel = M_sinInt3, n = 1000)
plot(res)
testDispersion(res)
# Modelo varianza
M_sinInt3_varident <- glmmTMB(
(PF.d/PL_m) ~ Localidad * Línea + ns(tiempo, 3) + (1|Bloque),
dispformula = ~ Localidad,
family = gaussian,
data = medidas_repetidas_clean
)
res <- simulateResiduals(fittedModel = M_sinInt3_varident, n = 1000)
plot(res)
# Modelo varianza
M_sinInt3_varident <- glmmTMB(
(PF.d/PL_m) ~ Localidad * Línea + ns(tiempo, 3) + (1|Bloque),
dispformula = ~ Localidad,
family = gaussian,
data = medidas_repetidas_clean
)
res <- simulateResiduals(fittedModel = M_sinInt3_varident, n = 1000)
plot(res)
#no alcanza cambio a distribucion gamma
M_sinInt3_gamma <- glmmTMB(
(PF.d/PL_m) ~ Localidad * Línea + ns(tiempo, 3) + (1|Bloque),
dispformula = ~ Localidad,
family = Gamma(link = "log"),
data = medidas_repetidas_clean
)
### Supuestos
res <- simulateResiduals(fittedModel = M_sinInt3_gamma, n = 1000)
plot(res)
#no alcanza cambio a distribucion gamma
M_sinInt3_gamma <- glmmTMB(
(PF.d/PL_m) ~ Localidad * Línea + ns(tiempo, 3) + (1|Bloque),
#dispformula = ~ Localidad,
family = Gamma(link = "log"),
data = medidas_repetidas_clean
)
### Supuestos
res <- simulateResiduals(fittedModel = M_sinInt3_gamma, n = 1000)
plot(res)
M_sinInt2 <- glmmTMB( (PF.d/PL_m) ~ Localidad * Línea + ns(tiempo, 2) + (1|Bloque),
family = Gamma(link = "log"), , data = medidas_repetidas_clean )
M_sinInt3 <- glmmTMB( (PF.d/PL_m) ~ Localidad * Línea + ns(tiempo, 3) + (1|Bloque),
family = Gamma(link = "log"), , data = medidas_repetidas_clean )
M_conInt3 <- glmmTMB( (PF.d/PL_m) ~ Localidad * Línea* ns(tiempo, 3) + (1|Bloque),
family = Gamma(link = "log"), , data = medidas_repetidas_clean )
M_sinInt4 <- glmmTMB( (PF.d/PL_m) ~ Localidad * Línea + ns(tiempo, 4) + (1|Bloque),
family = Gamma(link = "log"), , data = medidas_repetidas_clean )
anova(M_sinInt2 , M_sinInt3, M_conInt3 , M_sinInt4)
anova( M_sinInt3, M_conInt3 )
anova(M_sinInt2 , M_sinInt4)
### Supuestos
res <- simulateResiduals(fittedModel = M_sinInt3, n = 1000) # cumple los supuestos
plot(res)
# M_sinInt2 <- glmmTMB( (PF.d/PL_m) ~ Localidad * Línea + ns(tiempo, 2) + (1|Bloque),
#                       family = gaussian , data = medidas_repetidas_clean )
M_sinInt3 <- glmmTMB( (PF.d/PL_m) ~ Localidad * Línea + ns(tiempo, 3) + (1|Bloque),
### Supuestos
res <- simulateResiduals(fittedModel = M_sinInt3, n = 1000)
# M_sinInt2 <- glmmTMB( (PF.d/PL_m) ~ Localidad * Línea + ns(tiempo, 2) + (1|Bloque),
#                       family = gaussian , data = medidas_repetidas_clean )
M_sinInt3 <- glmmTMB( (PF.d/PL_m) ~ Localidad * Línea + ns(tiempo, 3) + (1|Bloque),
### Supuestos
res <- simulateResiduals(fittedModel = M_sinInt3, n = 1000)
plot(res)
# M_sinInt2 <- glmmTMB( (PF.d/PL_m) ~ Localidad * Línea + ns(tiempo, 2) + (1|Bloque),
#                       family = gaussian , data = medidas_repetidas_clean )
M_sinInt3 <- glmmTMB( (PF.d/PL_m) ~ Localidad * Línea + ns(tiempo, 3) + (1|Bloque),
family = gaussian , data = medidas_repetidas_clean )
### Supuestos
res <- simulateResiduals(fittedModel = M_sinInt3, n = 1000)
plot(res)
M_sinInt2 <- glmmTMB( (PF.d/PL_m) ~ Localidad * Línea + ns(tiempo, 2) + (1|Bloque),
family = Gamma(link = "log"), , data = medidas_repetidas_clean )
M_sinInt3 <- glmmTMB( (PF.d/PL_m) ~ Localidad * Línea + ns(tiempo, 3) + (1|Bloque),
family = Gamma(link = "log"), , data = medidas_repetidas_clean )
M_conInt3 <- glmmTMB( (PF.d/PL_m) ~ Localidad * Línea* ns(tiempo, 3) + (1|Bloque),
family = Gamma(link = "log"), , data = medidas_repetidas_clean )
M_sinInt4 <- glmmTMB( (PF.d/PL_m) ~ Localidad * Línea + ns(tiempo, 4) + (1|Bloque),
family = Gamma(link = "log"), , data = medidas_repetidas_clean )
anova(M_sinInt2 , M_sinInt3 , M_sinInt4)
### Supuestos
res <- simulateResiduals(fittedModel = M_sinInt3, n = 1000) # cumple los supuestos
plot(res)
### Supuestos
res <- simulateResiduals(fittedModel = M_sinInt3, n = 1000) # cumple los supuestos
plot(res)
library(dplyr)
library(purrr)
library(ggplot2)
library(MuMIn)
library(tidyr)
library(tidyverse)
library(broom)
library(lme4)
library(scales)
library(glmmTMB)
library(DHARMa)
library(emmeans)
library(readxl)
crudos <- read_excel("CJB_Datos concurso jovenes de bioestadistica.xlsx")
summary(crudos)
# Paso a factor las variables que crrespondan
crudos$Bloque<- as.factor(crudos$Bloque)
library(dplyr)
library(tidyr)
library(ggplot2)
library(lme4)
library(lmerTest)  # para p-valores
library(nlme)
# cols <- paletteer_d("ggthemes::excel_Depth")
# cols_mod <- cols
# cols_mod[2] <- cols[6]
medidas_repetidas <- read_excel(
path = "CJB_Datos concurso jovenes de bioestadistica.xlsx",
sheet = "Medidas repetidas en el tiempo"
)
library(dplyr)
library(tidyr)
library(ggplot2)
library(lme4)
library(lmerTest)  # para p-valores
library(nlme)
# cols <- paletteer_d("ggthemes::excel_Depth")
# cols_mod <- cols
# cols_mod[2] <- cols[6]
medidas_repetidas <- read_excel(
path = "CJB_Datos concurso jovenes de bioestadistica.xlsx",
sheet = "Medidas repetidas en el tiempo"
)
medidas_repetidas$Bloque<- as.factor(medidas_repetidas$Bloque)
medidas_repetidas$Línea<- as.factor(medidas_repetidas$Línea)
medidas_repetidas$Localidad<- as.factor(medidas_repetidas$Localidad)
medidas_repetidas$Corte<- as.factor(medidas_repetidas$Corte)
library(dplyr)
#### Modelo ###
library(lme4)
library(lmerTest)  # para p-valores
library(nlme)
medidas_repetidas_clean <- na.omit(medidas_repetidas[, c("PF.d", "PL_m", "Localidad", "Línea", "tiempo", "Bloque")])
library(performance)
#EL TIEMPO NO TIENE UNA RELACION LINEAL OBVIAMENTE-> planteo spline natural
library(glmmTMB)
library(splines)
library(multcomp)
###### Hago lo q nos dijo Adriana ####
crudos$`PF Total`
M_PFTotal <- lmer(`PF Total`~ Localidad*Línea + (1|Bloque) + Año , data = relativos)
InteracM_PFTotal <- lmer(`PF Total`~ Localidad*Línea*Año + (1|Bloque) , data = relativos)
anova(M_PFTotal,InteracM_PFTotal)
#supestos
res <- simulateResiduals(M_PFTotal, n = 1000)
plot(res)
testResiduals(res)
testDispersion(res)
summary(M_PFTotal )
anova(M_PFTotal )
# No se cumplen los supuestos modelo varinza
M_PFTotal_varIdent <- lme(
`PF Total` ~ Localidad * Línea + Año,
random = ~ 1 | Bloque,
weights = varIdent(form = ~ 1 | Localidad*Línea),
data = relativos
)
# No se cumplen los supuestos modelo varinza
M_PFTotal_varIdent <- lme(
`PF Total` ~ Localidad * Línea + Año,
random = ~ 1 | Bloque,
weights = varIdent(form = ~ 1 | Localidad*Línea),
data = relativos
)
# No se cumplen los supuestos modelo varinza
relativos$LocLinea <- interaction(relativos$Localidad, relativos$Línea)
M_PFTotal_varIdent <- lme(
`PF Total` ~ Localidad * Línea + Año,
random = ~ 1 | Bloque,
weights = varIdent(form = ~ 1 | LocLinea),
data = relativos
)
library(nlme)
M_PFTotal_varIdent <- lme(
`PF Total` ~ Localidad * Línea + Año,
random = ~ 1 | Bloque,
weights = varIdent(form = ~ 1 | Localidad),
data = relativos
)
relativos <- relativos %>%
dplyr::rename(PF_Total = `PF Total`)
M_PFTotal_varIdent <- lme(
PF_Total ~ Localidad * Línea + Año,
random = ~ 1 | Bloque,
weights = varIdent(form = ~ 1 | Localidad),
data = relativos
)
M_PFTotal_varIdent <- lme(
PF_Total ~ Localidad * Línea + Año,
random = ~ 1 | Bloque,
weights = varIdent(form = ~ 1 | Localidad*Línea),
data = relativos
)
leveneTest(M_PFTotal_varIdent)
#CHEQUEO QUE LA NORMALIDAD SIGA BIEN
res <- residuals(M_PFTotal_varIdent, type = "normalized")
# Shapiro-Wilk test
shapiro.test(res)
# QQplot
qqnorm(res)
qqline(res, col = "red", lwd = 2)
#MURIÓ LA NORMALIDAD!!! VAMOS A TENER QUE PROBAR CON OTRO MODELO
# Pruebo con Gamma
M_gamma <- glmer(PF_Total ~ Localidad * Línea + Año + (1|Bloque),
family = Gamma(link = "log"),
data = relativos)
#MURIÓ LA NORMALIDAD!!! VAMOS A TENER QUE PROBAR CON OTRO MODELO
# Pruebo con Gamma
M_gamma <- glmer(PF_Total ~ Localidad * Línea + Año + (1|Bloque),
family = Gamma(link = "log"),
data = relativos)
res <- simulateResiduals(M_gamma, n = 1000)
plot(res)
testResiduals(res)
testDispersion(res)
# Medias estimadas para Localidad
#LO CAMBIË PARA QUE USE EL MODELO GAMMA
emm_loc <- emmeans(M_gamma, ~ Localidad)
summary(M_gamma)
anova(M_gamma)
car::Anova(M_gamma)
car::Anova(M_gamma, type =2)
# Medias estimadas para Localidad
#LO CAMBIË PARA QUE USE EL MODELO GAMMA
emm_loc <- emmeans(M_gamma, ~ Localidad |Línea)
emm_loc
# Comparaciones post hoc con letras
pairs(emmeans(M_gamma, ~Localidad|Línea), adjust = "tukey")
cld_loc <- multcomp::cld(emm_loc, Letters = letters, adjust = "tukey")
cld_loc <- multcomp::cld(emm_loc, Letters = letters, adjust =  "link")
# Comparaciones post hoc con letras
pairs(emmeans(M_gamma, ~Localidad|Línea), adjust = "sidak")
cld_loc <- multcomp::cld(emm_loc, Letters = letters, adjust = "sidak")
df_plot_loc <- as.data.frame(cld_loc)
# Paleta de colores
cols <- paletteer::paletteer_d("ggthemes::excel_Depth")
cols_mod <- cols
cols_mod[2] <- cols[6]   # opcional, para personalizar como en tu ejemplo
# Gráfico para Localidad
ggplot(df_plot_loc, aes(x = Localidad, y = emmean)) +
geom_col(color = "black", fill = "darkgreen") +
geom_errorbar(aes(ymin = lower.CL, ymax = upper.CL),
width = 0.2, size = 0.8) +
geom_text(aes(label = .group, y = emmean + 3),   # ajustá el +30 según escala de PF Total
size = 5)  +
labs(
x = "Localidad",
y = "PF Total (media marginal)",
title = "Medias estimadas de PF Total por localidad"
) +
theme_minimal(base_size = 14)
df_plot_loc
# Gráfico para Localidad
ggplot(df_plot_loc, aes(x = Localidad, y = emmean)) +
geom_col(color = "black", fill = "darkgreen") +
geom_errorbar(aes(ymin = asymp.LCL, ymax = asymp.UCL),
width = 0.2, size = 0.8) +
geom_text(aes(label = .group, y = emmean + 3),   # ajustá el +30 según escala de PF Total
size = 5)  +
labs(
x = "Localidad",
y = "PF Total (media marginal)",
title = "Medias estimadas de PF Total por localidad"
) +
theme_minimal(base_size = 14)
# Paleta de colores
cols <- paletteer::paletteer_d("ggthemes::excel_Depth")
cols_mod <- cols
cols_mod[2] <- cols[6]   # opcional, para personalizar como en tu ejemplo
emm_df <- as.data.frame(emm_loc)
cld_df <- data.frame(
Localidad = cld_loc$Localidad,
Línea = cld_loc$Línea,
label = cld_loc$.group
)
cld_df
# Gráfico para Localidad
ggplot(emm_df, aes(x = Localidad, y = response, fill = Línea)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin = lower.CL, ymax = upper.CL),
width = 0.2, position = position_dodge(0.9)) +
geom_text(data = cld_df,
aes(x = Localidad, y = max(emm_df$response) + 0.05, label = label),
inherit.aes = FALSE,
position = position_dodge(0.9)) +
facet_wrap(~Línea) +
scale_fill_manual(values = cols_mod) +
theme_minimal(base_size = 14) +
labs(
y = "PF Total (estimado)",
x = "Localidad",
fill = "Línea",
title = "Efectos marginales de Localidad por Línea",
subtitle = "Letras indican diferencias significativas (Sidak)"
)
# Gráfico para Localidad
ggplot(emm_df, aes(x = Localidad, y = response, fill = Línea)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin = asymp.LCL, ymax = asymp.UCL),
width = 0.2, position = position_dodge(0.9)) +
geom_text(data = cld_df,
aes(x = Localidad, y = max(emm_df$response) + 0.05, label = label),
inherit.aes = FALSE,
position = position_dodge(0.9)) +
facet_wrap(~Línea) +
scale_fill_manual(values = cols_mod) +
theme_minimal(base_size = 14) +
labs(
y = "PF Total (estimado)",
x = "Localidad",
fill = "Línea",
title = "Efectos marginales de Localidad por Línea",
subtitle = "Letras indican diferencias significativas (Sidak)"
)
emm_df
# Gráfico para Localidad
ggplot(emm_df, aes(x = Localidad, y = emmean, fill = Línea)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin = asymp.LCL, ymax = asymp.UCL),
width = 0.2, position = position_dodge(0.9)) +
geom_text(data = cld_df,
aes(x = Localidad, y = max(emm_df$emmean) + 0.05, label = label),
inherit.aes = FALSE,
position = position_dodge(0.9)) +
facet_wrap(~Línea) +
scale_fill_manual(values = cols_mod) +
theme_minimal(base_size = 14) +
labs(
y = "PF Total (estimado)",
x = "Localidad",
fill = "Línea",
title = "Efectos marginales de Localidad por Línea",
subtitle = "Letras indican diferencias significativas (Sidak)"
)
# ---- Si querés hacer lo mismo por LÍNEA ----
# Medias estimadas para Localidad
#LO CAMBIË PARA QUE USE EL MODELO GAMMA
emm_lin <- emmeans(M_gamma, ~ Línea |Localidad)
emm_lin
emm_lin <- emmeans(M_gamma, ~ Línea |Localidad)
emm_lin
# Comparaciones post hoc con letras
pairs(emmeans(M_gamma, ~ Línea |Localidad), adjust = "sidak")
cld_lin <- multcomp::cld(emm_lin, Letters = letters, adjust = "sidak")
# Paleta de colores
cols <- paletteer::paletteer_d("ggthemes::excel_Depth")
cols_mod <- cols
cols_mod[2] <- cols[6]   # opcional, para personalizar como en tu ejemplo
emm_df <- as.data.frame(emm_lin)
cld_df <- data.frame(
Localidad = cld_lin$Localidad,
Línea = cld_lin$Línea,
label = cld_lin$.group
)
cld_df
emm_df
# Gráfico para Localidad
ggplot(emm_df, aes(x = Línea, y = emmean, fill = Localidad)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin = asymp.LCL, ymax = asymp.UCL),
width = 0.2, position = position_dodge(0.9)) +
geom_text(data = cld_df,
aes(x = Localidad, y = max(emm_df$emmean) + 0.05, label = label),
inherit.aes = FALSE,
position = position_dodge(0.9)) +
facet_wrap(~Localidad) +
scale_fill_manual(values = cols_mod) +
theme_minimal(base_size = 14) +
labs(
y = "PF Total (estimado)",
x = "Línea",
fill = "Localidad",
title = "Efectos marginales de Línea por Localidad",
subtitle = "Letras indican diferencias significativas (Sidak)"
)
# Comparaciones post hoc con letras
pairs(emmeans(M_gamma, ~ Línea |Localidad), adjust = "sidak")
cld_lin <- multcomp::cld(emm_lin, Letters = letters, adjust = "sidak")
# Paleta de colores
cols <- paletteer::paletteer_d("ggthemes::excel_Depth")
cols_mod <- cols
cols_mod[2] <- cols[6]   # opcional, para personalizar como en tu ejemplo
emm_df <- as.data.frame(emm_lin)
cld_df <- data.frame(
Localidad = cld_lin$Localidad,
Línea = cld_lin$Línea,
label = cld_lin$.group
)
cld_df
emm_df
# Gráfico para Localidad
ggplot(emm_df, aes(x = Línea, y = emmean, fill = Localidad)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin = asymp.LCL, ymax = asymp.UCL),
width = 0.2, position = position_dodge(0.9)) +
geom_text(data = cld_df,
aes(x = Línea, y = max(emm_df$emmean) + 0.05, label = label),
inherit.aes = FALSE,
position = position_dodge(0.9)) +
facet_wrap(~Localidad) +
scale_fill_manual(values = cols_mod) +
theme_minimal(base_size = 14) +
labs(
y = "PF Total (estimado)",
x = "Línea",
fill = "Localidad",
title = "Efectos marginales de Línea por Localidad",
subtitle = "Letras indican diferencias significativas (Sidak)"
)
# Estimación de medias marginales
emm <- emmeans(M_gamma, ~ Localidad*Línea)
# ComparacionesM_gamma# Comparaciones múltiples de Tukey
pairs_emm <- contrast(emm, method = "pairwise", adjust = "tukey")
pairs_emm
# Grupos de Tukey (letras)
cld_emm <- multcomp::cld(emm, adjust = "tukey", Letters = letters, alpha = 0.05)
# ComparacionesM_gamma# Comparaciones múltiples de Tukey
pairs_emm <- contrast(emm, method = "pairwise", adjust = "sidak")
# Grupos de Tukey (letras)
cld_emm <- multcomp::cld(emm, adjust = "sidak", Letters = letters, alpha = 0.05)
cld_emm
# Gráfico
ggplot(cld_emm, aes(x =interaction(Localidad, Línea),
y = emmean,
fill = Línea)) +
geom_col(position = position_dodge(width = 0.9), color = "black") +
geom_errorbar(aes(ymin = emmean - SE, ymax = emmean + SE),
width = 0.2, position = position_dodge(width = 0.9)) +
geom_text(aes(label = .group, y = emmean + SE + 5),
vjust = 0, size = 5) +
scale_fill_manual(values = cols_mod) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))+
labs(x = "Localidad × Línea", y = "PF Total (media ± SE)",
title = "Comparaciones entre combinaciones de Localidad y Línea") +
theme_bw()+
coord_flip()
