title = "Producción (PFtotal) por Línea en cada Localidad",
x = "Línea",
y = "PF total"
) +
theme_minimal() +
theme(legend.position = "none")
#PRODUCCION TOTAL en cada sitio para cada planta
PF_total <- crudos %>%
rename(PF_total = `PF total`)
ggplot(crudos, aes(x = Línea, y =`PF Total`, fill = Línea)) +
geom_boxplot() +
facet_wrap(~ Localidad) +
labs(
title = "Producción (PFtotal) por Línea en cada Localidad",
x = "Línea",
y = "PF total"
) +
theme_minimal() +
theme(legend.position = "none")
#Según localidad x línea
ggplot(crudos, aes(x = Localidad, y =`PF Total`, fill = Localidad)) +
geom_boxplot() +
facet_wrap(~ Línea) +
labs(
title = "Producción (PFtotal) por Localidad según la Línea",
x = "Localidad",
y = "PF total"
) +
theme_minimal() +
theme(legend.position = "none")
#PRODUCCION TOTAL en cada sitio para cada planta
#Según linea x localidad
ggplot(relativos, aes(x = Línea, y =`PF Total`, fill = Línea)) +
geom_boxplot() +
facet_wrap(~ Localidad) +
labs(
title = "Producción (PFtotal) por Línea en cada Localidad",
x = "Línea",
y = "PF total"
) +
theme_minimal() +
theme(legend.position = "none")
#PRODUCCION TOTAL en cada sitio para cada planta
#Según linea x localidad
ggplot(relativos, aes(x = Línea, y =`PF Total`, fill = Línea)) +
geom_boxplot() +
facet_wrap(~ Localidad) +
labs(
title = "Producción relativizada (PFtotal) por Línea en cada Localidad",
x = "Línea",
y = "PF total"
) +
theme_minimal() +
theme(legend.position = "none")
#Según localidad x línea
ggplot(relativos, aes(x = Localidad, y =`PF Total`, fill = Localidad)) +
geom_boxplot() +
facet_wrap(~ Línea) +
labs(
title = "Producción relativizada (PFtotal) por Localidad según la Línea",
x = "Localidad",
y = "PF total"
) +
theme_minimal() +
theme(legend.position = "none")
library(dplyr)
library(purrr)
library(ggplot2)
library(MuMIn)
library(tidyr)
library(tidyverse)
library(broom)
library(lme4)
library(scales)
library(glmmTMB)
library(DHARMa)
library(emmeans)
library(readxl)
#Producción por localidad sin usar a las líneas como factor
ggplot(relativos, aes(x = Localidad, y =`PF Total`, fill = Localidad)) +
geom_boxplot() +
labs(
title = "Producción relativizada (PFtotal) por Localidad",
x = "Localidad",
y = "PF total"
) +
theme_minimal() +
theme(legend.position = "none")
ggplot(relativos, aes(x = Línea, y =`PF Total`, fill = Línea)) +
geom_boxplot() +
labs(
title = "Producción relativizada (PFtotal) por Línea",
x = "Línea",
y = "PF total"
) +
theme_minimal() +
theme(legend.position = "none")
View(relativos)
View(relativos)
ggplot(relativos, aes(x = Localidad, y =`PF total.d`, fill = Localidad)) +
geom_boxplot() +
labs(
title = "Producción relativizada (PFtotal) por Localidad por día",
x = "Localidad",
y = "PF total"
) +
theme_minimal() +
theme(legend.position = "none")
#Producción por linea sin usar las localidades como factor
ggplot(relativos, aes(x = Línea, y =`PF total.d`, fill = Línea)) +
geom_boxplot() +
labs(
title = "Producción relativizada (PFtotal) por Línea por día",
x = "Línea",
y = "PF total"
) +
theme_minimal() +
theme(legend.position = "none")
ggplot(relativos, aes(x = Localidad, y =`PF total.d`, fill = Localidad)) +
geom_boxplot() +
labs(
title = "Producción relativizada (PFtotal.d) por Localidad por día",
x = "Localidad",
y = "PF total"
) +
theme_minimal() +
theme(legend.position = "none")
#Producción por linea sin usar las localidades como factor
ggplot(relativos, aes(x = Línea, y =`PF total.d`, fill = Línea)) +
geom_boxplot() +
labs(
title = "Producción relativizada (PFtotal.d) por Línea por día",
x = "Línea",
y = "PF total"
) +
theme_minimal() +
theme(legend.position = "none")
#Densidad de Macollos
ggplot(crudos, aes(x = Línea, y =`DMR`, fill = Línea)) +
geom_boxplot() +
+facet_wrap(~Localidad)
#Densidad de Macollos
ggplot(crudos, aes(x = Línea, y =`DMR`, fill = Línea)) +
geom_boxplot() +
facet_wrap(~Localidad)+
labs(
title = "Cantidad de Macollor Reproductivos segpun cantidad de Macollos Totales(DMR) por Línea",
x = "Línea",
y = "DMR"
) +
theme_minimal() +
theme(legend.position = "none")
#Densidad de Macollos
ggplot(crudos, aes(x = Línea, y =`DMR`, fill = Línea)) +
geom_boxplot() +
labs(
title = "Cantidad de Macollor Reproductivos segpun cantidad de Macollos Totales(DMR) por Línea",
x = "Línea",
y = "DMR"
) +
theme_minimal() +
theme(legend.position = "none")
#Densidad de Macollos
ggplot(crudos, aes(x = Línea, y =`DMR`, fill = Línea)) +
geom_boxplot() +
labs(
title = "Cantidad de Macollor Reproductivos según cantidad de Macollos Totales(DMR) por Línea",
x = "Línea",
y = "DMR"
) +
theme_minimal() +
theme(legend.position = "none")
#Según localidad?
ggplot(crudos, aes(x = Localidad, y =`DMR`, fill = Localidad)) +
geom_boxplot() +
labs(
title = "Cantidad de Macollor Reproductivos según cantidad de Macollos Totales(DMR) por Localidad",
x = "Localidad",
y = "DMR"
) +
theme_minimal() +
theme(legend.position = "none")
View(crudos)
View(crudos)
library(dplyr)
library(purrr)
library(ggplot2)
library(MuMIn)
library(tidyr)
library(tidyverse)
library(broom)
library(lme4)
library(scales)
library(glmmTMB)
library(DHARMa)
library(emmeans)
library(readxl)
crudos <- read_excel("CJB_Datos concurso jovenes de bioestadistica.xlsx")
View(crudos)
plot(x=`Prod. Sem`, y=DMR, data=crudos)
plot(x=`Prod.Sem`, y=DMR, data=crudos)
plot(x= `Prod. Sem`, y=DMR, data=crudos)
ggplot(crudos, aes(x= `Prod. Sem`, y=DMR, fill=Localidad))
ggplot(crudos, aes(x= `Prod. Sem`, y=DMR, fill=Localidad))+
geom_point()
ggplot(crudos, aes(x= `Prod. Sem`, y=DMR))+
geom_point()
q()
library(dplyr)
library(purrr)
library(ggplot2)
library(MuMIn)
library(tidyr)
library(tidyverse)
library(broom)
library(lme4)
library(scales)
library(glmmTMB)
library(DHARMa)
library(emmeans)
library(readxl)
crudos <- read_excel("CJB_Datos concurso jovenes de bioestadistica.xlsx")
library(dplyr)
library(purrr)
library(ggplot2)
library(MuMIn)
library(tidyr)
library(tidyverse)
library(broom)
library(lme4)
library(scales)
library(glmmTMB)
library(DHARMa)
library(emmeans)
library(readxl)
crudos <- read_excel("CJB_Datos concurso jovenes de bioestadistica.xlsx")
d
medidas_repetidas <- read_excel(
path = "CJB_Datos concurso jovenes de bioestadistica.xlsx",
sheet = "Medidas repetidas en el tiempo"
)
medidas_repetidas$Bloque<- as.factor(medidas_repetidas$Bloque)
medidas_repetidas$Línea<- as.factor(medidas_repetidas$Línea)
medidas_repetidas$Localidad<- as.factor(medidas_repetidas$Localidad)
medidas_repetidas$Corte<- as.factor(medidas_repetidas$Corte)
summary(medidas_repetidas)
str(medidas_repetidas)
#Relativos
# 1) Tomamos como referencia la densidad de plantas (Pl/m) de 23-24
plantas_ref <- crudos %>%
filter(Año == "23-24") %>%
group_by(Localidad, Línea, Bloque) %>%
summarise(Pl_m_ref = mean(`Pl/m`, na.rm = TRUE), .groups = "drop")
# 2) Creamos la base 'relativos'
medidas_repetidas_Rel <-medidas_repetidas %>%
left_join(plantas_ref, by = c("Localidad", "Línea", "Bloque")) %>%
mutate(
# usamos siempre Pl/m de 23-24 como denominador
Pl_m_usada =  Pl_m_ref
) %>%
# 3) Dividimos todas las variables numéricas (excepto Pl/m y las auxiliares)
mutate(across(
where(is.numeric) & !c("Pl_m_ref","Pl_m_usada", "tiempo"),
~ .x / Pl_m_usada
))
str(medidas_repetidas_Rel)
#### Modelo ###
library(lme4)
library(lmerTest)  # para p-valores
Dias <- glmer(PF.d ~ Localidad*tiempo*Línea + (1|Bloque),family=gaussian , data = medidas_repetidas_Rel)
M_PDias <- glmer(PF.d ~ Localidad*tiempo*Línea + (1|Bloque),family=gaussian , data = medidas_repetidas_Rel)
sapply(medidas_repetidas_Rel[, c("Localidad","Línea","Bloque")], levels)
medidas_repetidas_Rel$Línea<- as.factor(medidas_repetidas_Rel$Línea)
medidas_repetidas_Rel$Localidad<- as.factor(medidas_repetidas_Rel$Localidad)
sapply(medidas_repetidas_Rel[, c("Localidad","Línea","Bloque")], levels)
M_PDias <- glmer(PF.d ~ Localidad*tiempo*Línea + (1|Bloque),family=gaussian , data = medidas_repetidas_Rel)
lapply(medidas_repetidas_Rel[, c("Localidad","Línea","Bloque")], function(x) table(x, useNA="ifany"))
M_PDias <- lmer(PF.d ~ Localidad*tiempo*Línea + (1|Bloque),
data = medidas_repetidas_Rel)
medidas_repetidas_Rel <- droplevels(medidas_repetidas_Rel)
M_PDias <- lmer(PF.d ~ Localidad*tiempo*Línea + (1|Bloque),
data = medidas_repetidas_Rel)
View(medidas_repetidas_Rel)
str(medidas_repetidas_Rel$PF.d)
M_PDias <- glmer(
PF.d ~ Localidad * tiempo * Línea + (1 | Bloque),
family = gaussian(link = "identity"),
data = medidas_repetidas_Rel
)
## Linea temporal
# Pivotar las columnas de días a PF a formato largo
library(dplyr)
library(tidyr)
library(ggplot2)
library(lme4)
library(lmerTest)  # para p-valores
library(nlme)
medidas_repetidas <- read_excel(
path = "CJB_Datos concurso jovenes de bioestadistica.xlsx",
sheet = "Medidas repetidas en el tiempo"
)
library(dplyr)
library(purrr)
library(ggplot2)
library(MuMIn)
library(tidyr)
library(tidyverse)
library(broom)
library(lme4)
library(scales)
library(glmmTMB)
library(DHARMa)
library(emmeans)
library(readxl)
crudos <- read_excel("CJB_Datos concurso jovenes de bioestadistica.xlsx")
summary(crudos)
# Paso a factor las variables que crrespondan
crudos$Bloque<- as.factor(crudos$Bloque)
medidas_repetidas <- read_excel(
path = "CJB_Datos concurso jovenes de bioestadistica.xlsx",
sheet = "Medidas repetidas en el tiempo"
)
medidas_repetidas$Bloque<- as.factor(medidas_repetidas$Bloque)
medidas_repetidas$Línea<- as.factor(medidas_repetidas$Línea)
medidas_repetidas$Localidad<- as.factor(medidas_repetidas$Localidad)
medidas_repetidas$Corte<- as.factor(medidas_repetidas$Corte)
summary(medidas_repetidas)
str(medidas_repetidas)
#### Modelo ###
library(lme4)
library(lmerTest)  # para p-valores
library(nlme)
#no alcanza cambio a distribucion gamma
M_gamma3 <- glmmTMB(
(PF.d/PL_m) ~ Localidad * Línea + ns(tiempo, 3) + (1|Bloque),
family = Gamma(link = "log"),
data = medidas_repetidas_clean
)
medidas_repetidas_clean <- na.omit(medidas_repetidas[, c("PF.d", "PL_m", "Localidad", "Línea", "tiempo", "Bloque")])
M_PDias <- lme(
fixed = (PF.d/PL_m) ~ Localidad * Línea * tiempo,
random = ~1 | Bloque,
weights = varIdent(form = ~1 | Localidad),
data = medidas_repetidas_clean
)
#no alcanza cambio a distribucion gamma
M_gamma3 <- glmmTMB(
(PF.d/PL_m) ~ Localidad * Línea + ns(tiempo, 3) + (1|Bloque),
family = Gamma(link = "log"),
data = medidas_repetidas_clean
)
#EL TIEMPO NO TIENE UNA RELACION LINEAL OBVIAMENTE-> planteo spline natural
library(glmmTMB)
library(splines)
library(performance)
#no alcanza cambio a distribucion gamma
M_gamma3 <- glmmTMB(
(PF.d/PL_m) ~ Localidad * Línea + ns(tiempo, 3) + (1|Bloque),
family = Gamma(link = "log"),
data = medidas_repetidas_clean
)
M_sinInt2 <- glmmTMB( (PF.d/PL_m) ~ Localidad * Línea + ns(tiempo, 2) + (1|Bloque),
family = Gamma(link = "log"), , data = medidas_repetidas_clean )
M_sinInt3 <- glmmTMB( (PF.d/PL_m) ~ Localidad * Línea + ns(tiempo, 3) + (1|Bloque),
family = Gamma(link = "log"), , data = medidas_repetidas_clean )
M_conInt3 <- glmmTMB( (PF.d/PL_m) ~ Localidad * Línea* ns(tiempo, 3) + (1|Bloque),
family = Gamma(link = "log"), , data = medidas_repetidas_clean )
M_sinInt4 <- glmmTMB( (PF.d/PL_m) ~ Localidad * Línea + ns(tiempo, 4) + (1|Bloque),
family = Gamma(link = "log"), , data = medidas_repetidas_clean )
anova(M_sinInt2 , M_sinInt3 , M_sinInt4)
### Supuestos
res <- simulateResiduals(fittedModel = M_sinInt3, n = 1000) # cumple los supuestos
emm_loc_lin <- emmeans(M_sinInt3, ~ Localidad * Línea)
summary(emm_loc_lin)
summary(emm_loc_lin, type = "response")
emm_loc_lin_resp <- summary(emm_loc_lin, type = "response")
emm_loc_lin_resp
pairs_all <- pairs(emm_loc_lin)
summary(pairs_all)
pairs_all <- pairs(emm_loc_lin)
summary(pairs_all, infer = TRUE)
library(multcomp)
cld_loc_lin <- cld(emm_loc_lin, type = "response", Letters = letters)
cld_link <- cld(emm_loc_lin, Letters = letters, type = "link")
cld_link
ggplot(cld_resp, aes(x = Línea, y = response, color = Localidad)) +
geom_point(position = position_dodge(width = 0.6), size = 3) +
geom_errorbar(aes(ymin = asymp.LCL, ymax = asymp.UCL),
width = 0.2, position = position_dodge(width = 0.6)) +
geom_text(aes(label = .group),
position = position_dodge(width = 0.6),
vjust = -0.8, size = 5) +
labs(y = "Estimated mean PF.d / PL_m",
x = "Línea",
title = "Estimated marginal means (Gamma GLMM) with group letters") +
theme_minimal(base_size = 14)
# 3) Join letters to response-scale means
cld_resp <- left_join(emm_resp, select(cld_link, Localidad, Línea, .group),
by = c("Localidad", "Línea"))
# 2) Get means on response scale
emm_resp <- summary(emm_loc_lin, type = "response")
# 3) Join letters to response-scale means
cld_resp <- left_join(emm_resp, select(cld_link, Localidad, Línea, .group),
by = c("Localidad", "Línea"))
ggplot(cld_resp, aes(x = Línea, y = response, color = Localidad)) +
geom_point(position = position_dodge(width = 0.6), size = 3) +
geom_errorbar(aes(ymin = asymp.LCL, ymax = asymp.UCL),
width = 0.2, position = position_dodge(width = 0.6)) +
geom_text(aes(label = .group),
position = position_dodge(width = 0.6),
vjust = -0.8, size = 5) +
labs(y = "Estimated mean PF.d / PL_m",
x = "Línea",
title = "Estimated marginal means (Gamma GLMM) with group letters") +
theme_minimal(base_size = 14)
emm_loc_lin_resp <- summary(emm_loc_lin, type = "response")
emm_loc_lin_resp
pairs_all <- pairs(emm_loc_lin)
summary(pairs_all)
pairs_all <- pairs(emm_loc_lin)
summary(pairs_all, infer = TRUE)
library(multcomp)
cld_link <- cld(emm_loc_lin, Letters = letters, type = "link")
cld_link
# 2) Get means on response scale
emm_resp <- summary(emm_loc_lin, type = "response")
# 3) Join letters to response-scale means
cld_resp <- left_join(emm_resp, select(cld_link, Localidad, Línea, .group),
by = c("Localidad", "Línea"))
cld_link
# 2) Get means on response scale
emm_resp <- summary(emm_loc_lin, type = "response")
str(emm_resp)
cld_link_df <- as.data.frame(cld_link)
# Convert emm_resp to a plain data.frame
emm_resp_df <- as.data.frame(emm_resp)
# Now join by the factor columns
cld_resp <- left_join(emm_resp_df,
cld_link_df[, c("Localidad", "Línea", ".group")],
by = c("Localidad", "Línea"))
cld_resp
ggplot(cld_resp, aes(x = Línea, y = response, color = Localidad)) +
geom_point(position = position_dodge(width = 0.6), size = 3) +
geom_errorbar(aes(ymin = asymp.LCL, ymax = asymp.UCL),
width = 0.2, position = position_dodge(width = 0.6)) +
geom_text(aes(label = .group),
position = position_dodge(width = 0.6),
vjust = -0.8, size = 5) +
labs(y = "Estimated mean PF.d / PL_m",
x = "Línea",
title = "Estimated marginal means (Gamma GLMM) with group letters") +
theme_minimal(base_size = 14)
ggplot(cld_resp, aes(x = Localidad, y = response, color = Línea)) +
geom_point(position = position_dodge(width = 0.6), size = 3) +
geom_errorbar(aes(ymin = asymp.LCL, ymax = asymp.UCL),
width = 0.2, position = position_dodge(width = 0.6)) +
geom_text(aes(label = .group),
position = position_dodge(width = 0.6),
vjust = -0.8, size = 5) +
labs(y = "Estimated mean PF.d / PL_m",
x = "Línea",
title = "Estimated marginal means (Gamma GLMM) with group letters") +
theme_minimal(base_size = 14)
emm_loc_lin <- emmeans(M_sinInt3, ~ Localidad * Línea)
emm_loc_lin_resp <- summary(emm_loc_lin, type = "response")
emm_loc_lin_resp
pairs_all <- pairs(emm_loc_lin)
summary(pairs_all)
pairs_all <- pairs(emm_loc_lin)
summary(pairs_all, infer = TRUE)
library(multcomp)
cld_link <- cld(emm_loc_lin, Letters = letters, type = "link")
cld_link
cld_link_df <- as.data.frame(cld_link)
# Convert emm_resp to a plain data.frame
emm_resp_df <- as.data.frame(emm_resp)
# Now join by the factor columns
cld_resp <- left_join(emm_resp_df,
cld_link_df[, c("Localidad", "Línea", ".group")],
by = c("Localidad", "Línea"))
cld_resp
ggplot(cld_resp, aes(x = Localidad, y = response, color = Línea)) +
geom_point(position = position_dodge(width = 0.6), size = 3) +
geom_errorbar(aes(ymin = asymp.LCL, ymax = asymp.UCL),
width = 0.2, position = position_dodge(width = 0.6)) +
geom_text(aes(label = .group),
position = position_dodge(width = 0.6),
vjust = -0.8, size = 5) +
labs(y = "Estimated mean PF.d / PL_m",
x = "Línea",
title = "Estimated marginal means (Gamma GLMM) with group letters") +
theme_minimal(base_size = 14)
cols <- paletteer_d("ggthemes::excel_Depth")
## Linea temporal
install.packages("paletteer")
cols <- paletteer_d("ggthemes::excel_Depth")
# Paleta de colores
cols <- paletteer::paletteer_d("ggthemes::excel_Depth")
cols_mod <- cols
cols_mod[2] <- cols[6]   # opcional, para personalizar como en tu ejemplo
ggplot(cld_resp, aes(x = Localidad, y = response, color = Línea)) +
geom_point(position = position_dodge(width = 0.6), size = 3) +
geom_errorbar(aes(ymin = asymp.LCL, ymax = asymp.UCL),
width = 0.2, position = position_dodge(width = 0.6)) +
geom_text(aes(label = .group),
position = position_dodge(width = 0.6),
vjust = -0.8, size = 5) +
scale_color_manual(values = cols_mod) +
labs(y = "Estimated mean PF.d / PL_m",
x = "Línea",
title = "Estimated marginal means (Gamma GLMM) with group letters") +
theme_minimal(base_size = 14)
