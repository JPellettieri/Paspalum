plot(res)
testResiduals(res)
testDispersion(res)
summary(M_PFTotal )
anova(M_PFTotal )
str(relativos)
str(medidas_repetidas)
str(relativos)
str(medidas_repetidas)
str(crudos)
medidas_repetidas <- read_excel(
path = "CJB_Datos concurso jovenes de bioestadistica (viejo).xlsx",
sheet = "Medidas repetidas en el tiempo"
)
medidas_repetidas$Bloque<- as.factor(medidas_repetidas$Bloque)
medidas_repetidas$Línea<- as.factor(medidas_repetidas$Línea)
medidas_repetidas$Localidad<- as.factor(medidas_repetidas$Localidad)
medidas_repetidas$Corte<- as.factor(medidas_repetidas$Corte)
summary(medidas_repetidas)
str(medidas_repetidas)
# Paso 1: aseguramos tipos de datos iguales
crudos2 <- crudos %>%
mutate(Localidad = as.factor(Localidad),
Línea     = as.factor(Línea),
Año       = as.character(Año),   # igual que en medidas_repetidas
Bloque    = as.factor(Bloque))
medidas_repetidas2 <- medidas_repetidas %>%
mutate(Localidad = as.factor(Localidad),
Línea     = as.factor(Línea),
Año       = as.character(Año),
Bloque    = as.factor(Bloque))
# Paso 2: unir Pl/m
medidas_repetidas_joined <- medidas_repetidas2 %>%
left_join(crudos2 %>% select(Año, Localidad, Línea, Bloque, `Pl/m`),
by = c("Año", "Localidad", "Línea", "Bloque"))
View(medidas_repetidas_joined)
# Paso 1: aseguramos tipos de datos iguales
crudos2 <- crudos %>%
mutate(Localidad = as.factor(Localidad),
Línea     = as.factor(Línea),
Año       = as.character(Año),   # igual que en medidas_repetidas
Bloque    = as.factor(Bloque))
medidas_repetidas <- medidas_repetidas %>%
mutate(Localidad = as.factor(Localidad),
Línea     = as.factor(Línea),
Año       = as.character(Año),
Bloque    = as.factor(Bloque))
# Paso 2: unir Pl/m
medidas_repetidas <- medidas_repetidas
left_join(crudos2 %>% select(Año, Localidad, Línea, Bloque, `Pl/m`),
by = c("Año", "Localidad", "Línea", "Bloque"))
medidas_repetidas <- medidas_repetidas %>%
# filtrar solo los datos del año 23-24
filter(Año == "23-24") %>%
# duplicar cambiando el año a 24-25
mutate(Año = "24-25") %>%
# unirlos con la base original
bind_rows(medidas_repetidas)
View(medidas_repetidas)
# Paso 1: aseguramos tipos de datos iguales
crudos2 <- crudos %>%
mutate(Localidad = as.factor(Localidad),
Línea     = as.factor(Línea),
Año       = as.character(Año),   # igual que en medidas_repetidas
Bloque    = as.factor(Bloque))
medidas_repetidas <- medidas_repetidas %>%
mutate(Localidad = as.factor(Localidad),
Línea     = as.factor(Línea),
Año       = as.character(Año),
Bloque    = as.factor(Bloque))
# Paso 2: unir Pl/m
medidas_repetidas <- medidas_repetidas
left_join(crudos2 %>% select(Año, Localidad, Línea, Bloque, `Pl/m`),
by = c("Año", "Localidad", "Línea", "Bloque"))
medidas_repetidas <- medidas_repetidas %>%
# filtrar solo los datos del año 23-24
filter(Año == "23-24") %>%
# duplicar cambiando el año a 24-25
mutate(Año = "24-25") %>%
# unirlos con la base original
bind_rows(medidas_repetidas)
View(medidas_repetidas)
# Paso 1: aseguramos tipos de datos iguales
crudos2 <- crudos %>%
mutate(Localidad = as.factor(Localidad),
Línea     = as.factor(Línea),
Año       = as.character(Año),   # igual que en medidas_repetidas
Bloque    = as.factor(Bloque))
medidas_repetidas2 <- medidas_repetidas %>%
mutate(Localidad = as.factor(Localidad),
Línea     = as.factor(Línea),
Año       = as.character(Año),
Bloque    = as.factor(Bloque))
# Paso 2: unir Pl/m
medidas_repetidas_joined <- medidas_repetidas2 %>%
left_join(crudos2 %>% select(Año, Localidad, Línea, Bloque, `Pl/m`),
by = c("Año", "Localidad", "Línea", "Bloque"))
medidas_repetidas_expand <- medidas_repetidas_joined %>%
# filtrar solo los datos del año 23-24
filter(Año == "23-24") %>%
# duplicar cambiando el año a 24-25
mutate(Año = "24-25") %>%
# unirlos con la base original
bind_rows(medidas_repetidas)
View(medidas_repetidas_expand)
View(medidas_repetidas_joined)
View(medidas_repetidas_joined)
View(medidas_repetidas_joined)
View(medidas_repetidas_expand)
View(crudos)
medidas_repetidas <- read_excel(
path = "CJB_Datos concurso jovenes de bioestadistica.xlsx",
sheet = "Medidas repetidas en el tiempo"
)
medidas_repetidas$Bloque<- as.factor(medidas_repetidas$Bloque)
medidas_repetidas$Línea<- as.factor(medidas_repetidas$Línea)
medidas_repetidas$Localidad<- as.factor(medidas_repetidas$Localidad)
medidas_repetidas$Corte<- as.factor(medidas_repetidas$Corte)
summary(medidas_repetidas)
str(medidas_repetidas)
library(dplyr)
summary(relativos$`TC.d 1`)
summary(relativos$`TC.d 2`)
summary(relativos$`TC.d 3`)
summary(relativos$`TC.d 4`)
#Grafico
ggplot(medidas_repetidas,
aes(x = tiempo, y = PF.d, color = Localidad, group = interaction(Localidad, Línea, Bloque))) +
stat_summary(aes(group = Localidad),
fun = mean, geom = "line", size = 1.5) + # línea de la media por localidad
labs(
x = "Tiempo (días)",
y = "Producción por día (PF.d)",
color = "Localidad"
) +
theme_minimal(base_size = 14)
anova(M_PDias)
###### Hago lo q nos dijo Adriana ####
crudos$`PF Total`
M_PFTotal <- lmer(`PF Total`~ Localidad*Línea + (1|Bloque) + Año , data = relativos)
#supestos
res <- simulateResiduals(M_PFTotal, n = 1000)
plot(res)
M_PDias <- glmer(PF.d ~ Localidad*Línea*tiempo + (1|Bloque),family=gaussian , data = medidas_repetidas)
View(medidas_repetidas)
medidas_repetidas <- read_excel(
path = "CJB_Datos concurso jovenes de bioestadistica.xlsx",
sheet = "Medidas repetidas en el tiempo"
)
View(medidas_repetidas)
medidas_repetidas <- read_excel(
path = "CJB_Datos concurso jovenes de bioestadistica.xlsx",
sheet = "Medidas repetidas en el tiempo"
)
View(medidas_repetidas)
M_PDias <- glmer((PF.d/PL_m) ~ Localidad*Línea*tiempo + (1|Bloque),family=gaussian , data = medidas_repetidas)
summary(M_PDias)
anova(M_PDias)
M_PDias <- glmer((PF.d) ~ Localidad*Línea*tiempo + (1|Bloque),family=gaussian , data = medidas_repetidas)
summary(M_PDias)
anova(M_PDias)
M_PDias <- glmer((PF.d/PL_m) ~ Localidad*Línea*tiempo + (1|Bloque),family=gaussian , data = medidas_repetidas)
anova(M_PDias)
res <- simulateResiduals(M_PDias, n = 1000)
plot(res)
testResiduals(res)
testDispersion(res)
# No se cumplen los supuestos modelo varinza
# Modelo con varianza diferente por localidad
mod_varloc <- lme(PF.d ~ Localidad * tiempo,
random = ~1 | Bloque/Linea,
weights = varIdent(form = ~1|Localidad),
data = datos)
# No se cumplen los supuestos modelo varinza
# Modelo con varianza diferente por localidad
M_PDias <- lme(PF.d ~ Localidad * tiempo,
random = ~1 | Bloque/Linea,
weights = varIdent(form = ~1|Localidad),
data = datos)
res <- simulateResiduals(M_PDias, n = 1000)
library(nlme)
res <- simulateResiduals(M_PDias, n = 1000)
plot(res)
# No se cumplen los supuestos modelo varinza
# Modelo con varianza diferente por localidad
M_PDias <- lme(PF.d ~ Localidad * tiempo,
random = ~1 | Bloque/Linea,
weights = varIdent(form = ~1|Localidad),
data = datos)
library(nlme
cols <- paletteer_d("ggthemes::excel_Depth")
library(nlme
cols <- paletteer_d("ggthemes::excel_Depth")
library(nlme
cols <- paletteer_d("ggthemes::excel_Depth")
library(nlme
cols <- paletteer_d("ggthemes::excel_Depth")
library(dplyr)
library(purrr)
library(ggplot2)
library(MuMIn)
library(tidyr)
library(tidyverse)
library(broom)
library(lme4)
library(scales)
library(glmmTMB)
library(DHARMa)
library(emmeans)
library(readxl)
library(nlme
cols <- paletteer_d("ggthemes::excel_Depth")
# No se cumplen los supuestos modelo varinza
# Modelo con varianza diferente por localidad
M_PDias <- lme((PF.d/PL_m)~ Localidad * tiempo, (1 | Bloque),
weights = varIdent(form = ~1|Localidad),
data = medidas_repetidas)
# No se cumplen los supuestos modelo varinza
# Modelo con varianza diferente por localidad
M_PDias <- lme((PF.d/PL_m)~ Localidad * tiempo, (1 | Bloque),
weights = varIdent(form = ~1|Localidad),
data = medidas_repetidas)
M_PDias <- glmer((PF.d/PL_m) ~ Localidad*Línea*tiempo + (1|Bloque),family=gaussian , data = medidas_repetidas)
# No se cumplen los supuestos modelo varinza
# Modelo con varianza diferente por localidad
M_PDias <- lme((PF.d/PL_m)~ Localidad * tiempo, (1 | Bloque),
weights = varIdent(form = ~1|Localidad),
data = medidas_repetidas)
# No se cumplen los supuestos modelo varinza
# Modelo con varianza diferente por localidad
M_PDias <- lme((PF.d/PL_m)~ Localidad * tiempo, (1 |Bloque),
weights = varIdent(form = ~1|Localidad),
data = medidas_repetidas)
# No se cumplen los supuestos modelo varinza
# Modelo con varianza diferente por localidad
M_PDias <- lme((PF.d/PL_m)~ Localidad *Línea* iempo, (1 |Bloque),
weights = varIdent(form = ~1|Localidad),
data = medidas_repetidas)
# No se cumplen los supuestos modelo varinza
# Modelo con varianza diferente por localidad
M_PDias <- lme((PF.d/PL_m)~ Localidad *Línea*Tiempo, (1 |Bloque),
weights = varIdent(form = ~1|Localidad),
data = medidas_repetidas)
# No se cumplen los supuestos modelo varinza
# Modelo con varianza diferente por localidad
M_PDias <- lmer((PF.d/PL_m)~ Localidad *Línea*Tiempo, (1 |Bloque),
weights = varIdent(form = ~1|Localidad),
data = medidas_repetidas)
# No se cumplen los supuestos modelo varinza
# Modelo con varianza diferente por localidad
M_PDias <- lmer((PF.d/PL_m)~ Localidad *Línea*tiempo, (1 |Bloque),
weights = varIdent(form = ~1|Localidad),
data = medidas_repetidas)
summary(M_PDias)
anova(M_PDias)
res <- simulateResiduals(M_PDias, n = 1000)
plot(res)
testResiduals(res)
testDispersion(res)
# No se cumplen los supuestos modelo varinza
# Modelo con varianza diferente por localidad
M_PDias <- lmer((PF.d/PL_m)~ Localidad *Línea*tiempo, (1 |Bloque),
weights = varIdent(form = ~1|Localidad),
data = medidas_repetidas)
# No se cumplen los supuestos modelo varinza
# Modelo con varianza diferente por localidad
M_PDias <- lmer((PF.d/PL_m)~ Localidad *Línea*tiempo, (1 |Bloque),
weights = varIdent(form = ~1|Localidad),
data = medidas_repetidas)
# No se cumplen los supuestos modelo varinza
# Modelo con varianza diferente por localidad
M_PDias <- lme(
fixed = (PF.d/PL_m) ~ Localidad * Línea * tiempo,
random = ~1 | Bloque/Linea,
weights = varIdent(form = ~1 | Localidad),
data = medidas_repetidas
)
# No se cumplen los supuestos modelo varinza
# Modelo con varianza diferente por localidad
M_PDias <- lme(
fixed = (PF.d/PL_m) ~ Localidad * Línea * tiempo,
random = ~1 | Bloque/Línea,
weights = varIdent(form = ~1 | Localidad),
data = medidas_repetidas
)
# No se cumplen los supuestos modelo varinza
# Modelo con varianza diferente por localidad
M_PDias <- lme(
fixed = (PF.d/PL_m) ~ Localidad * Línea * tiempo,
random = ~1 | Bloque,
weights = varIdent(form = ~1 | Localidad),
data = medidas_repetidas
)
medidas_repetidas_clean <- na.omit(medidas_repetidas[, c("PF.d", "PL_m", "Localidad", "Línea", "tiempo", "Bloque")])
M_PDias <- lme(
fixed = (PF.d/PL_m) ~ Localidad * Línea * tiempo,
random = ~1 | Bloque,
weights = varIdent(form = ~1 | Localidad),
data = medidas_repetidas_clean
)
res <- simulateResiduals(M_PDias, n = 1000)
plot(res)
#Chequeo supuestos
plot(M_PDias)     # residuos vs ajustados
qqnorm(resid(M_PDias))
qqline(resid(M_PDias))
library(performance)
check_model(M_PDias)
check_model(M_PDias)
#Grafico
ggplot(medidas_repetidas,
aes(x = tiempo, y = PF.d, color = Localidad, group = interaction(Localidad, Línea, Bloque))) +
stat_summary(aes(group = Localidad),
fun = mean, geom = "line", size = 1.5) + # línea de la media por localidad
labs(
x = "Tiempo (días)",
y = "Producción por día (PF.d)",
color = "Localidad"
) +
theme_minimal(base_size = 14)
resumen <- medidas_repetidas %>%
group_by(Localidad, Línea, tiempo) %>%
summarise(
media = mean(PF, na.rm = TRUE),
sd = sd(PF, na.rm = TRUE),
n = n()
) %>%
mutate(
se = sd / sqrt(n),
IC_inf = media - qt(0.975, df = n-1) * se,
IC_sup = media + qt(0.975, df = n-1) * se
)
ggplot(resumen, aes(x = tiempo, y = media, color = Línea, group = Línea)) +
geom_line() +
geom_point(size = 2) +
geom_errorbar(aes(ymin = IC_inf, ymax = IC_sup), width = 0.2) +
facet_wrap(~ Localidad) +
theme_minimal()
#EL TIEMPO NO TIENE UNA RELACION LINEAL OBVIAMENTE-> planteo spline natural
library(glmmTMB)
library(splines)
M_PDias_tmb <- glmmTMB(
(PF.d/PL_m) ~ Localidad * Línea + ns(tiempo, df = 4) + (1|Bloque),
dispformula = ~ Localidad,
family = gaussian(),
data = medidas_repetidas_clean
)
summary(M_PDias_tmb)
anova(M_PDias_tmb)
car::Anova(M_PDias_tmb, type = 3)
M_PDias_tmb <- glmmTMB(
(PF.d/PL_m) ~ Localidad * Línea* ns(tiempo, df = 4) + (1|Bloque),
dispformula = ~ Localidad,
family = gaussian(),
data = medidas_repetidas_clean
)
medidas_repetidas$Bloque
summary(M_PDias_tmb)
car::Anova(M_PDias_tmb, type = 3)
summary(M_PDias_tmb)
car::Anova(M_PDias_tmb, type = 3)
M_PDias_tmb <- glmmTMB(
(PF.d/PL_m) ~ Localidad * Línea + ns(tiempo, df = 4) + (1|Bloque),
dispformula = ~ Localidad,
family = gaussian(),
data = medidas_repetidas_clean
)
car::Anova(M_PDias_tmb, type = 3)
library(splines)
M_sinInt <- glmmTMB((PF.d/PL_m) ~ Localidad * Línea + ns(tiempo, 4) + (1|Bloque),
family = gaussian, data = medidas_repetidas_clean)
M_conInt <- glmmTMB((PF.d/PL_m) ~ Localidad * Línea * ns(tiempo, 4) + (1|Bloque),
family = gaussian, data = medidas_repetidas_clean)
anova(M_sinInt, M_conInt)  # LRT
M_sinInt <- glmmTMB((PF.d/PL_m) ~ Localidad * Línea + ns(tiempo, 4) + (1|Bloque),
family = gaussian, data = medidas_repetidas_clean)
M_conInt <- glmmTMB((PF.d/PL_m) ~ Localidad * Línea * ns(tiempo, 4) + (1|Bloque),
family = gaussian, data = medidas_repetidas_clean)
anova(M_sinInt, M_conInt)  # LRT
M_sinInt <- glmmTMB((PF.d/PL_m) ~ Localidad * Línea + ns(tiempo, 3) + (1|Bloque),
family = gaussian, data = medidas_repetidas_clean)
M_conInt <- glmmTMB((PF.d/PL_m) ~ Localidad * Línea * ns(tiempo, 3) + (1|Bloque),
family = gaussian, data = medidas_repetidas_clean)
anova(M_sinInt, M_conInt)  # LRT
Car::anova(M_sinInt)
car::anova(M_sinInt)
car::Anova(M_sinInt)
library(nlme
cols <- paletteer_d("ggthemes::excel_Depth")
car::Anova(M_sinInt,M_sinInt4)
library(nlme
cols <- paletteer_d("ggthemes::excel_Depth")
library(nlme
cols <- paletteer_d("ggthemes::excel_Depth")
M_sinInt4 <- glmmTMB((PF.d/PL_m) ~ Localidad * Línea + ns(tiempo, 4) + (1|Bloque),
family = gaussian, data = medidas_repetidas_clean)
#M_conInt <- glmmTMB((PF.d/PL_m) ~ Localidad * Línea * ns(tiempo, 3) + (1|Bloque),
family = gaussian, data = medidas_repetidas_clean) #demasiados parámetros para la info disponible. no converge
library(nlme
cols <- paletteer_d("ggthemes::excel_Depth")
library(nlme
cols <- paletteer_d("ggthemes::excel_Depth")
M_sinIntf <- glmmTMB( (PF.d/PL_m) ~ Localidad * Línea + ns(tiempo, 4) + (1|Bloque),
family = gaussian , data = medidas_repetidas_clean )
car::Anova(M_sinInt,M_sinIntf)
car::Anova(M_sinInt,M_sinIntf)
M_sinInt <- glmmTMB( (PF.d/PL_m) ~ Localidad * Línea + ns(tiempo, 3) + (1|Bloque),
family = gaussian , data = medidas_repetidas_clean )
M_sinInt4 <- glmmTMB( (PF.d/PL_m) ~ Localidad * Línea + ns(tiempo, 4) + (1|Bloque),
family = gaussian , data = medidas_repetidas_clean )
car::Anova(M_sinInt,M_sinIntf)
car::Anova(M_sinInt, M_sinInt4)
car::Anova(M_sinInt , M_sinInt4)
anova(M_sinInt , M_sinInt4)
M_sinInt2 <- glmmTMB( (PF.d/PL_m) ~ Localidad * Línea + ns(tiempo, 2) + (1|Bloque),
family = gaussian , data = medidas_repetidas_clean )
M_sinInt3 <- glmmTMB( (PF.d/PL_m) ~ Localidad * Línea + ns(tiempo, 3) + (1|Bloque),
family = gaussian , data = medidas_repetidas_clean )
anova(M_sinInt2 , M_sinInt3)
car::anova(M_sinInt3)
car::Anova(M_sinInt3)
anova(M_sinInt2 , M_sinInt3 , M_sinInt4) # spline 4 complejiza y no agrega nada al analisis, 3 es significativamnete mejor que 2
car::Anova(M_sinInt3)
### Supuestos
res <- simulateResiduals(fittedModel = M_sinInt3, n = 1000)
plot(res)
testDispersion(res)
# Modelo varianza
M_sinInt3_varident <- glmmTMB(
(PF.d/PL_m) ~ Localidad * Línea + ns(tiempo, 3) + (1|Bloque),
dispformula = ~ Localidad,
family = gaussian,
data = medidas_repetidas_clean
)
res <- simulateResiduals(fittedModel = M_sinInt3_varident, n = 1000)
plot(res)
# Modelo varianza
M_sinInt3_varident <- glmmTMB(
(PF.d/PL_m) ~ Localidad * Línea + ns(tiempo, 3) + (1|Bloque),
dispformula = ~ Localidad,
family = gaussian,
data = medidas_repetidas_clean
)
res <- simulateResiduals(fittedModel = M_sinInt3_varident, n = 1000)
plot(res)
#no alcanza cambio a distribucion gamma
M_sinInt3_gamma <- glmmTMB(
(PF.d/PL_m) ~ Localidad * Línea + ns(tiempo, 3) + (1|Bloque),
dispformula = ~ Localidad,
family = Gamma(link = "log"),
data = medidas_repetidas_clean
)
### Supuestos
res <- simulateResiduals(fittedModel = M_sinInt3_gamma, n = 1000)
plot(res)
#no alcanza cambio a distribucion gamma
M_sinInt3_gamma <- glmmTMB(
(PF.d/PL_m) ~ Localidad * Línea + ns(tiempo, 3) + (1|Bloque),
#dispformula = ~ Localidad,
family = Gamma(link = "log"),
data = medidas_repetidas_clean
)
### Supuestos
res <- simulateResiduals(fittedModel = M_sinInt3_gamma, n = 1000)
plot(res)
M_sinInt2 <- glmmTMB( (PF.d/PL_m) ~ Localidad * Línea + ns(tiempo, 2) + (1|Bloque),
family = Gamma(link = "log"), , data = medidas_repetidas_clean )
M_sinInt3 <- glmmTMB( (PF.d/PL_m) ~ Localidad * Línea + ns(tiempo, 3) + (1|Bloque),
family = Gamma(link = "log"), , data = medidas_repetidas_clean )
M_conInt3 <- glmmTMB( (PF.d/PL_m) ~ Localidad * Línea* ns(tiempo, 3) + (1|Bloque),
family = Gamma(link = "log"), , data = medidas_repetidas_clean )
M_sinInt4 <- glmmTMB( (PF.d/PL_m) ~ Localidad * Línea + ns(tiempo, 4) + (1|Bloque),
family = Gamma(link = "log"), , data = medidas_repetidas_clean )
anova(M_sinInt2 , M_sinInt3, M_conInt3 , M_sinInt4)
anova( M_sinInt3, M_conInt3 )
anova(M_sinInt2 , M_sinInt4)
### Supuestos
res <- simulateResiduals(fittedModel = M_sinInt3, n = 1000) # cumple los supuestos
plot(res)
# M_sinInt2 <- glmmTMB( (PF.d/PL_m) ~ Localidad * Línea + ns(tiempo, 2) + (1|Bloque),
#                       family = gaussian , data = medidas_repetidas_clean )
M_sinInt3 <- glmmTMB( (PF.d/PL_m) ~ Localidad * Línea + ns(tiempo, 3) + (1|Bloque),
### Supuestos
res <- simulateResiduals(fittedModel = M_sinInt3, n = 1000)
# M_sinInt2 <- glmmTMB( (PF.d/PL_m) ~ Localidad * Línea + ns(tiempo, 2) + (1|Bloque),
#                       family = gaussian , data = medidas_repetidas_clean )
M_sinInt3 <- glmmTMB( (PF.d/PL_m) ~ Localidad * Línea + ns(tiempo, 3) + (1|Bloque),
### Supuestos
res <- simulateResiduals(fittedModel = M_sinInt3, n = 1000)
plot(res)
# M_sinInt2 <- glmmTMB( (PF.d/PL_m) ~ Localidad * Línea + ns(tiempo, 2) + (1|Bloque),
#                       family = gaussian , data = medidas_repetidas_clean )
M_sinInt3 <- glmmTMB( (PF.d/PL_m) ~ Localidad * Línea + ns(tiempo, 3) + (1|Bloque),
family = gaussian , data = medidas_repetidas_clean )
### Supuestos
res <- simulateResiduals(fittedModel = M_sinInt3, n = 1000)
plot(res)
M_sinInt2 <- glmmTMB( (PF.d/PL_m) ~ Localidad * Línea + ns(tiempo, 2) + (1|Bloque),
family = Gamma(link = "log"), , data = medidas_repetidas_clean )
M_sinInt3 <- glmmTMB( (PF.d/PL_m) ~ Localidad * Línea + ns(tiempo, 3) + (1|Bloque),
family = Gamma(link = "log"), , data = medidas_repetidas_clean )
M_conInt3 <- glmmTMB( (PF.d/PL_m) ~ Localidad * Línea* ns(tiempo, 3) + (1|Bloque),
family = Gamma(link = "log"), , data = medidas_repetidas_clean )
M_sinInt4 <- glmmTMB( (PF.d/PL_m) ~ Localidad * Línea + ns(tiempo, 4) + (1|Bloque),
family = Gamma(link = "log"), , data = medidas_repetidas_clean )
anova(M_sinInt2 , M_sinInt3 , M_sinInt4)
### Supuestos
res <- simulateResiduals(fittedModel = M_sinInt3, n = 1000) # cumple los supuestos
plot(res)
### Supuestos
res <- simulateResiduals(fittedModel = M_sinInt3, n = 1000) # cumple los supuestos
plot(res)
